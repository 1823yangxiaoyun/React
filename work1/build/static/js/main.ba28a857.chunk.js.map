{"version":3,"sources":["Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","index.js"],"names":["Todoing","numArr","todo","i","map","item","checked","numArr1","this","props","className","idx","key","onClick","change","delTodo","Component","Todoinput","handleInput","e","keyCode","addTodo","target","value","style","fontSize","htmlFor","id","name","onKeyDown","type","Todolist","addItem","msg","setState","state","localStorage","setItem","JSON","stringify","delItem","a","splice","checkboxChage","tempList","parse","getItem","num","ReactDOM","render","document","getElementById"],"mappings":"yNAEqBA,E,2MAejBC,OAAO,SAACC,GACJ,IAAIC,EAAE,EAMN,OALAD,GAAO,IAAIE,KAAI,SAACC,GACPA,EAAKC,SACNH,OAGDA,G,EAEXI,QAAQ,SAACL,GACL,IAAIC,EAAE,EAMN,OALCD,GAAO,IAAIE,KAAI,SAACC,GACTA,EAAKC,SACLH,OAGDA,G,wEAGD,IAAD,OACL,OACI,6BACI,wDAAUK,KAAKP,OAAOO,KAAKC,MAAMP,MAAjC,KACA,wBAAIQ,UAAU,SAETF,KAAKC,MAAMP,MAAO,IAAIE,KAAI,SAACC,EAAKM,GAC7B,IAAKN,EAAKC,QACN,OAAO,wBAAIM,IAAKD,GAAK,4BAAQE,QAAS,WAAK,EAAKJ,MAAMK,OAAOH,KAAxC,KAAd,MAA2EN,EAAKA,KAAhF,OAAyF,4BAAQQ,QAAS,WAAK,EAAKJ,MAAMM,QAAQJ,KAAzC,qBAK3G,wDAAUH,KAAKD,QAAQC,KAAKC,MAAMP,MAAlC,KACD,wBAAIQ,UAAU,aAETF,KAAKC,MAAMP,MAAQ,IAAIE,KAAI,SAACC,EAAKM,GAC9B,GAAIN,EAAKC,QACL,OAAO,wBAAIM,IAAKD,GAAK,4BAAQE,QAAS,WAAK,EAAKJ,MAAMK,OAAOH,KAAxC,KAAd,MAA2EN,EAAKA,KAAhF,OAAyF,4BAAQQ,QAAS,WAAK,EAAKJ,MAAMM,QAAQJ,KAAzC,0B,GApDvFK,aCDhBC,E,2MACjBC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKX,MAAMY,QAAQF,EAAEG,OAAOC,Q,wEAG1B,IAAD,OACL,OACI,6BACI,2BAAOC,MAAO,CAACC,SAAS,IAAMC,QAAQ,OAAtC,sBACA,2BAAOC,GAAG,MAAMC,KAAK,KAAMC,UAAW,SAACV,GAAD,OAAK,EAAKD,YAAYC,IAAIW,KAAK,c,GAV9Cd,aCElBe,E,YACjB,aAAc,IAAD,8BACT,+CAKJC,QAAU,SAACC,GACP,EAAKC,SAAS,CACVhC,KAAK,GAAD,mBAAM,EAAKiC,MAAMjC,MAAjB,CAAsB,CAACG,KAAK4B,EAAI3B,SAAQ,OAC9C,WACE8B,aAAaC,QAAQ,MAAMC,KAAKC,UAAU,EAAKJ,MAAMjC,WAVhD,EAabsC,QAAU,SAACC,GACP,IAAIvC,EAAI,YAAO,EAAKiC,MAAMjC,MAC1BA,EAAKwC,OAAOD,EAAE,GACd,EAAKP,SAAS,CACVhC,KAAKA,IACP,WACEkC,aAAaC,QAAQ,MAAMC,KAAKC,UAAU,EAAKJ,MAAMjC,WAnBhD,EAsBbyC,cAAgB,SAAC/B,GACb,IAAIgC,EAAQ,YAAO,EAAKT,MAAMjC,MAC9B0C,EAAShC,GAAKN,SAAWsC,EAAShC,GAAKN,QACvC,EAAK4B,SAAS,CACVhC,KAAM0C,IAEVR,aAAaC,QAAQ,MAAMC,KAAKC,UAAU,EAAKJ,MAAMjC,QA1BrD,EAAKiC,MAAM,CACPjC,KAAMoC,KAAKO,MAAMT,aAAaU,QAAQ,MAAO,EAAKX,SAAW,IAHxD,E,sEAgCT,OACI,6BACI,kBAAC,EAAD,CAAWd,QAASb,KAAKwB,UACzB,kBAAC,EAAD,CAASjB,QAASP,KAAKgC,QAAStC,KAAMM,KAAK2B,MAAMjC,KAAMY,OAAQN,KAAKmC,cAAeI,IAAKvC,KAAKP,c,GApCvEe,aCOtCgC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,U","file":"static/js/main.ba28a857.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    // numArr=(todo)=>{\r\n    //     let i=0;\r\n    //     for( let j=0; j<todo.length;j++){ \r\n    //         if(!todo[j].checked){i++;}\r\n    //     }\r\n    //     return i;\r\n    // }\r\n    // numArr1=(todo)=>{\r\n    //     let i=0;\r\n    //     for( let j=0; j<todo.length;j++){ \r\n    //         if(todo[j].checked){i++;}\r\n    //     }\r\n    //     return i;\r\n    // }\r\n    numArr=(todo)=>{\r\n        let i=0;\r\n       (todo|| []).map((item)=>{\r\n            if (!item.checked) {\r\n                i++;\r\n            }\r\n        })\r\n        return i;\r\n    }\r\n    numArr1=(todo)=>{\r\n        let i=0;\r\n        (todo|| []).map((item)=>{\r\n            if (item.checked) {\r\n                i++;\r\n            }\r\n        })\r\n        return i;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>正在进行[{this.numArr(this.props.todo)}]</h4>\r\n                <ul className=\"list\">\r\n                    { \r\n                    (this.props.todo ||[]).map((item,idx)=>{\r\n                        if (!item.checked) {\r\n                            return(<li key={idx}><button onClick={()=>{this.props.change(idx)}}>+</button>---{item.item}----<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)}\r\n                     })\r\n                    }\r\n\r\n                </ul>\r\n                 <h4>已经完成[{this.numArr1(this.props.todo)}]</h4> \r\n                <ul className=\"donelist\">\r\n                { \r\n                    (this.props.todo || []).map((item,idx)=>{\r\n                        if (item.checked) {\r\n                            return(<li key={idx}><button onClick={()=>{this.props.change(idx)}}>+</button>---{item.item}----<button onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)} \r\n                     })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array\r\n}\r\n","import React, { Component } from 'react'\r\nexport default class Todoinput extends Component {\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label style={{fontSize:20 }} htmlFor=\"inp\">输入：</label>\r\n                <input id=\"inp\" name=\"n1\"  onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo: JSON.parse(localStorage.getItem(\"key\", this.state)) || []\r\n        }\r\n    }\r\n    addItem = (msg)=>{\r\n        this.setState({\r\n            todo: [...this.state.todo,{item:msg,checked:false}]\r\n        },()=>{\r\n            localStorage.setItem(\"key\",JSON.stringify(this.state.todo))\r\n        })\r\n    }\r\n    delItem = (a)=>{\r\n        let todo = [...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:todo\r\n        },()=>{\r\n            localStorage.setItem(\"key\",JSON.stringify(this.state.todo))\r\n        })\r\n    }\r\n    checkboxChage = (key) => {\r\n        let tempList = [...this.state.todo];\r\n        tempList[key].checked = !tempList[key].checked;\r\n        this.setState({\r\n            todo: tempList\r\n        })\r\n        localStorage.setItem(\"key\",JSON.stringify(this.state.todo))\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing delTodo={this.delItem} todo={this.state.todo} change={this.checkboxChage} num={this.numArr}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import ParentPortals from './Portals/ParentPortals'\r\n// 组件交互\r\n// 父组件--->子组件：调用时在子组件上添加属性\r\n// 在子组件中通过props获取数据\r\n// let {Provider,Comsumer} = React.createContext();\r\n// import {con} from './Context/Context'\r\nimport ToDolist from './Todolist/Todolist';\r\nReactDOM.render(<ToDolist/>,document.getElementById('root'));\r\n// 函数定义组件（无生命周期函数）\r\n// 当只是渲染结构时\r\n// function Todo(props){\r\n//     return (\r\n//         <div>\r\n//             {/* 条件渲染 */}\r\n//             {props.list.length>=6?<h1>todo</h1>:''}\r\n//             {props.list.length>=5 && <h1>todo</h1>}\r\n//             <ul>\r\n//                 {/* 循环渲染 */}\r\n//                 {\r\n//                     props.list.map(\r\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\r\n//                     )\r\n//                 }\r\n//             </ul>\r\n//         </div>\r\n//     )\r\n// }\r\n// var item = [1,2,3,4,5];\r\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n// react元素创建后不可改变\r\n// function tick(){\r\n//     var e = <div>\r\n//                 <p>当前时间</p>\r\n//                 <p>当前时间</p>\r\n//                 <h1>{new Date().toLocaleString()}</h1>;\r\n//             </div>\r\n//     ReactDOM.render(e,document.getElementById('root'));\r\n// }\r\n// tick();\r\n// setInterval(tick,1000);\r\n\r\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\r\n// var ele = React.createElement(\r\n//     'div',\r\n//     {'id':'box'},\r\n//     'hello',\r\n//     React.createElement(\r\n//         'h1',\r\n//         {'id':'h'},\r\n//         'react'\r\n//     )\r\n// );\r\n// var obj = {\r\n//     type: 'div',\r\n//     props: {\r\n//         id: 'box',\r\n//         class: 'box',\r\n//         children: ['hello',{\r\n//             type: 'h1',\r\n//             props: {\r\n//                 id: 'h',\r\n//                 class: 'h',\r\n//                 children: ['react']\r\n//             }\r\n//         }]\r\n//     }\r\n// }\r\n\r\n// // 自己声明render函数，实现页面渲染\r\n// function render(obj,container){\r\n//     var {type,props} = obj;\r\n//     // 文档碎片\r\n//     var fr = document.createDocumentFragment();\r\n\r\n//     var ele = document.createElement(type);\r\n//     for(var item in props){\r\n//         if(item === 'class'){\r\n//             ele.className = props[item];\r\n//         }else if(item === 'children'){\r\n//             for(var i=0;i<props[item].length;i++){\r\n//                 if(typeof props[item][i] === 'object'){\r\n//                     render(props[item][i],ele);\r\n//                 }else{\r\n//                     var txt = document.createTextNode(props[item][i]);\r\n//                     ele.appendChild(txt);\r\n//                 }\r\n//             }\r\n//         }else{\r\n//             ele[item] = props[item];\r\n//         }\r\n//     }\r\n//     fr.appendChild(ele);\r\n//     container.appendChild(fr);\r\n// }\r\n// render(obj,document.getElementById('root'));\r\n\r\n// 注意以下性能问题及优化方法\r\n\r\n// 加载html文件、浏览器解析html生成DOM树\r\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\r\n\r\n// 页面回流（重排）：内容改变、大小改变、结构改变\r\n// 页面重绘：把字体颜色、背景颜色等样式改变\r\n\r\n// 1、node.offsetLeft、node.offsetWidth等慎用\r\n// var root = document.getElementById('root');\r\n// var width = root.offsetWidth;\r\n// setInterval(function(){\r\n//     width += 1\r\n//     root.style.width = width + 'px';\r\n// },100)\r\n\r\n// display、width、height、font-size等会引起页面回流\r\n// document.body.style.width = '100px';\r\n// document.body.style.height = '100px';\r\n// 2、声明一个css的一个类\r\n// .change{\r\n//     width: 100px;\r\n//     height: 100px;\r\n// }\r\n// document.body.className = 'change';\r\n\r\n// 3、对节点的操作先用变量代替\r\n// console.time('a');\r\n// var str = '';\r\n// for(var i=0;i<1000;i++){\r\n//     str += '<li>'+i+'</li>';\r\n// }\r\n// document.body.innerHTML = str;\r\n// console.timeEnd('a');\r\n// 4、文档碎片的概念\r\n"],"sourceRoot":""}